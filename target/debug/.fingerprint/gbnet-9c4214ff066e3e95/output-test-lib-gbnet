{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `1`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `1`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `1`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `2`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `2`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `1`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `2`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `2`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `1`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `2`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `2`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `)`, `,`, `@`, `if`, or `|`, found `3`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1749,"line_start":59,"line_end":59,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":32}],"label":"expected one of `)`, `,`, `@`, `if`, or `|`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1747,"byte_end":1747,"line_start":59,"line_end":59,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `)`, `,`, `@`, `if`, or `|`, found `3`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `)`, `,`, `@`, `if`, or `|`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `1`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `2`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `2`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `3`","code":null,"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"missing `,`","code":null,"level":"help","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1863,"line_start":62,"line_end":62,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":",","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `3`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: missing `,`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around function argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\bit_io.rs","byte_start":5290,"byte_end":5291,"line_start":173,"line_end":173,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"        Ok((bits as u32), reader)","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\bit_io.rs","byte_start":5302,"byte_end":5303,"line_start":173,"line_end":173,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"        Ok((bits as u32), reader)","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_parens)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\bit_io.rs","byte_start":5290,"byte_end":5291,"line_start":173,"line_end":173,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"        Ok((bits as u32), reader)","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\bit_io.rs","byte_start":5302,"byte_end":5303,"line_start":173,"line_end":173,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"        Ok((bits as u32), reader)","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around function argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bit_io.rs:173:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok((bits as u32), reader)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_parens)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        Ok(\u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mbits as u32\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m, reader)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        Ok(bits as u32, reader)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around function argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\bit_io.rs","byte_start":5441,"byte_end":5442,"line_start":178,"line_end":178,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"        Ok((bits as i32), reader)","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\bit_io.rs","byte_start":5453,"byte_end":5454,"line_start":178,"line_end":178,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"        Ok((bits as i32), reader)","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\bit_io.rs","byte_start":5441,"byte_end":5442,"line_start":178,"line_end":178,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"        Ok((bits as i32), reader)","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\bit_io.rs","byte_start":5453,"byte_end":5454,"line_start":178,"line_end":178,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"        Ok((bits as i32), reader)","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around function argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bit_io.rs:178:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok((bits as i32), reader)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        Ok(\u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mbits as i32\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m, reader)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        Ok(bits as i32, reader)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `BitReader` and `BitWriter`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":45,"byte_end":54,"line_start":1,"line_end":1,"column_start":46,"column_end":55,"is_primary":true,"text":[{"text":"use super::{Serialize, Deserialize, bit_io::{BitWriter, BitReader}};","highlight_start":46,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\packet.rs","byte_start":56,"byte_end":65,"line_start":1,"line_end":1,"column_start":57,"column_end":66,"is_primary":true,"text":[{"text":"use super::{Serialize, Deserialize, bit_io::{BitWriter, BitReader}};","highlight_start":57,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":34,"byte_end":66,"line_start":1,"line_end":1,"column_start":35,"column_end":67,"is_primary":true,"text":[{"text":"use super::{Serialize, Deserialize, bit_io::{BitWriter, BitReader}};","highlight_start":35,"highlight_end":67}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `BitReader` and `BitWriter`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:1:46\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::{Serialize, Deserialize, bit_io::{BitWriter, BitReader}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `log::trace`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":99,"byte_end":109,"line_start":3,"line_end":3,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use log::trace;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":95,"byte_end":112,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use log::trace;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `log::trace`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse log::trace;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around type","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\serialize.rs","byte_start":1300,"byte_end":1309,"line_start":48,"line_end":48,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"        impl<$($T: Serialize),*> Serialize for ($($T),*) {","highlight_start":48,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:48:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<$($T: Serialize),*> Serialize for ($($T),*) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around type","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\serialize.rs","byte_start":1599,"byte_end":1608,"line_start":56,"line_end":56,"column_start":52,"column_end":61,"is_primary":true,"text":[{"text":"        impl<$($T: Deserialize),*> Deserialize for ($($T),*) {","highlight_start":52,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:56:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<$($T: Deserialize),*> Deserialize for ($($T),*) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `Serialize` for type `Instant`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\instant.rs","byte_start":123,"byte_end":149,"line_start":5,"line_end":5,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"impl Serialize for Instant {","highlight_start":1,"highlight_end":27}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\serialize.rs","byte_start":1261,"byte_end":1309,"line_start":48,"line_end":48,"column_start":9,"column_end":57,"is_primary":true,"text":[{"text":"        impl<$($T: Serialize),*> Serialize for ($($T),*) {","highlight_start":9,"highlight_end":57}],"label":"conflicting implementation for `Instant`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `Serialize` for type `Instant`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:48:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<$($T: Serialize),*> Serialize for ($($T),*) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `Instant`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0msrc\\instant.rs:5:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Serialize for Instant {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `Deserialize` for type `Instant`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\instant.rs","byte_start":396,"byte_end":424,"line_start":12,"line_end":12,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"impl Deserialize for Instant {","highlight_start":1,"highlight_end":29}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\serialize.rs","byte_start":1556,"byte_end":1608,"line_start":56,"line_end":56,"column_start":9,"column_end":61,"is_primary":true,"text":[{"text":"        impl<$($T: Deserialize),*> Deserialize for ($($T),*) {","highlight_start":9,"highlight_end":61}],"label":"conflicting implementation for `Instant`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: conflicting implementations of trait `Deserialize` for type `Instant`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:56:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<$($T: Deserialize),*> Deserialize for ($($T),*) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `Instant`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0msrc\\instant.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Deserialize for Instant {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfirst implementation here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"enum variant takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\bit_io.rs","byte_start":5287,"byte_end":5289,"line_start":173,"line_end":173,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        Ok((bits as u32), reader)","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\devon\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\result.rs","byte_start":19729,"byte_end":19731,"line_start":532,"line_end":532,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"wrap these arguments in parentheses to construct a tuple","code":null,"level":"help","spans":[{"file_name":"src\\bit_io.rs","byte_start":5290,"byte_end":5290,"line_start":173,"line_end":173,"column_start":12,"column_end":12,"is_primary":true,"text":[{"text":"        Ok((bits as u32), reader)","highlight_start":12,"highlight_end":12}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\bit_io.rs","byte_start":5311,"byte_end":5311,"line_start":173,"line_end":173,"column_start":33,"column_end":33,"is_primary":true,"text":[{"text":"        Ok((bits as u32), reader)","highlight_start":33,"highlight_end":33}],"label":null,"suggested_replacement":")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: enum variant takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bit_io.rs:173:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok((bits as u32), reader)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\devon\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\result.rs:532:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: wrap these arguments in parentheses to construct a tuple\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        Ok(\u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0m(bits as u32), reader\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"enum variant takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\bit_io.rs","byte_start":5438,"byte_end":5440,"line_start":178,"line_end":178,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        Ok((bits as i32), reader)","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\devon\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\result.rs","byte_start":19729,"byte_end":19731,"line_start":532,"line_end":532,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"wrap these arguments in parentheses to construct a tuple","code":null,"level":"help","spans":[{"file_name":"src\\bit_io.rs","byte_start":5441,"byte_end":5441,"line_start":178,"line_end":178,"column_start":12,"column_end":12,"is_primary":true,"text":[{"text":"        Ok((bits as i32), reader)","highlight_start":12,"highlight_end":12}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\bit_io.rs","byte_start":5462,"byte_end":5462,"line_start":178,"line_end":178,"column_start":33,"column_end":33,"is_primary":true,"text":[{"text":"        Ok((bits as i32), reader)","highlight_start":33,"highlight_end":33}],"label":null,"suggested_replacement":")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: enum variant takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bit_io.rs:178:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok((bits as i32), reader)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\devon\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\result.rs:532:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: wrap these arguments in parentheses to construct a tuple\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        Ok(\u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0m(bits as i32), reader\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\instant.rs","byte_start":270,"byte_end":291,"line_start":7,"line_end":7,"column_start":47,"column_end":68,"is_primary":true,"text":[{"text":"        let since_epoch = self.duration_since(std::time::UNIX_EPOCH).unwrap_or(Duration::ZERO);","highlight_start":47,"highlight_end":68}],"label":"expected `Instant`, found `SystemTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\instant.rs","byte_start":255,"byte_end":269,"line_start":7,"line_end":7,"column_start":32,"column_end":46,"is_primary":false,"text":[{"text":"        let since_epoch = self.duration_since(std::time::UNIX_EPOCH).unwrap_or(Duration::ZERO);","highlight_start":32,"highlight_end":46}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\devon\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\time.rs","byte_start":13146,"byte_end":13160,"line_start":316,"line_end":316,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"    pub fn duration_since(&self, earlier: Instant) -> Duration {","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\instant.rs:7:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let since_epoch = self.duration_since(std::time::UNIX_EPOCH).unwrap_or(Duration::ZERO);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Instant`, found `SystemTime`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\devon\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\time.rs:316:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn duration_since(&self, earlier: Instant) -> Duration {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `unwrap_or` found for struct `Duration` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\instant.rs","byte_start":293,"byte_end":302,"line_start":7,"line_end":7,"column_start":70,"column_end":79,"is_primary":true,"text":[{"text":"        let since_epoch = self.duration_since(std::time::UNIX_EPOCH).unwrap_or(Duration::ZERO);","highlight_start":70,"highlight_end":79}],"label":"method not found in `Duration`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `unwrap_or` found for struct `Duration` in the current scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\instant.rs:7:70\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let since_epoch = self.duration_since(std::time::UNIX_EPOCH).unwrap_or(Duration::ZERO);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Duration`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\instant.rs","byte_start":647,"byte_end":654,"line_start":16,"line_end":16,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        Ok((instant, reader))","highlight_start":13,"highlight_end":20}],"label":"expected `Instant`, found `SystemTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\instant.rs:16:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok((instant, reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Instant`, found `SystemTime`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `0` on type `&T0`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1932,"byte_end":1933,"line_start":68,"line_end":68,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":13,"highlight_end":14}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\serialize.rs","byte_start":1934,"byte_end":1936,"line_start":68,"line_end":68,"column_start":15,"column_end":17,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":15,"highlight_end":17}],"label":"type parameter 'T0' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no field `0` on type `&T0`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:68:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype parameter 'T0' declared here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T0, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1920,"byte_end":1937,"line_start":68,"line_end":68,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0);","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T0, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T0, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T0, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T0, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T0, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T0, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T0, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T1, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1940,"byte_end":1963,"line_start":69,"line_end":69,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T1, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T1, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T1, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected type parameter `T1`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\serialize.rs","byte_start":1960,"byte_end":1962,"line_start":69,"line_end":69,"column_start":21,"column_end":23,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1);","highlight_start":21,"highlight_end":23}],"label":"expected this type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected type parameter `T1`\n             found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `T1`, found integer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this type parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type parameter `\u001b[0m\u001b[0m\u001b[1m\u001b[35mT1\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T0, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T0, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T0, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T0, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T1, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T1, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T1, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T1, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T2, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1966,"byte_end":1995,"line_start":70,"line_end":70,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T2, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T2, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T2, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected type parameter `T1`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\serialize.rs","byte_start":1986,"byte_end":1988,"line_start":70,"line_end":70,"column_start":21,"column_end":23,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2);","highlight_start":21,"highlight_end":23}],"label":"expected this type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected type parameter `T1`\n             found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `T1`, found integer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this type parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type parameter `\u001b[0m\u001b[0m\u001b[1m\u001b[35mT1\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T0, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T0, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T0, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T0, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T1, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T1, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T1, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T1, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T2, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T2, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T2, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T2, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1742,"byte_end":1753,"line_start":59,"line_end":59,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":25,"highlight_end":36}],"label":"expected a tuple with 2 elements, found one with 3 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\serialize.rs","byte_start":1756,"byte_end":1780,"line_start":59,"line_end":59,"column_start":39,"column_end":63,"is_primary":false,"text":[{"text":"                    let (val_$n, r) = $T::deserialize(reader)?;","highlight_start":39,"highlight_end":63}],"label":"this expression has type `(T3, BitReader)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\serialize.rs","byte_start":1998,"byte_end":2033,"line_start":71,"line_end":71,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_tuple!","def_site_span":{"file_name":"src\\serialize.rs","byte_start":1194,"byte_end":1217,"line_start":46,"line_end":46,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! impl_tuple {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected tuple `(T3, BitReader)`\n   found tuple `(_, _, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:59:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let (val_$n, r) = $T::deserialize(reader)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `(T3, BitReader)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected a tuple with 2 elements, found one with 3 elements\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(T3, BitReader)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(_, _, _)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_tuple` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected type parameter `T1`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\serialize.rs","byte_start":2018,"byte_end":2020,"line_start":71,"line_end":71,"column_start":21,"column_end":23,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":21,"highlight_end":23}],"label":"expected this type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected type parameter `T1`\n             found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `T1`, found integer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this type parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type parameter `\u001b[0m\u001b[0m\u001b[1m\u001b[35mT1\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\serialize.rs","byte_start":1863,"byte_end":1865,"line_start":62,"line_end":62,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"                Ok((($(val_$n),*), reader))","highlight_start":28,"highlight_end":30}],"label":"expected type parameter `T3`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\serialize.rs","byte_start":2030,"byte_end":2032,"line_start":71,"line_end":71,"column_start":33,"column_end":35,"is_primary":false,"text":[{"text":"impl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);","highlight_start":33,"highlight_end":35}],"label":"expected this type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected type parameter `T3`\n             found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\serialize.rs:62:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok((($(val_$n),*), reader))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `T3`, found integer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_tuple!(0 T0, 1 T1, 2 T2, 3 T3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this type parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type parameter `\u001b[0m\u001b[0m\u001b[1m\u001b[35mT3\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `data`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":562,"byte_end":566,"line_start":23,"line_end":23,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    Data { data: Vec<u8>, ordered: bool },","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":562,"byte_end":566,"line_start":23,"line_end":23,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    Data { data: Vec<u8>, ordered: bool },","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":"data: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `data`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:23:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Data { data: Vec<u8>, ordered: bool },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `data: _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `ordered`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":577,"byte_end":584,"line_start":23,"line_end":23,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"    Data { data: Vec<u8>, ordered: bool },","highlight_start":27,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":577,"byte_end":584,"line_start":23,"line_end":23,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"    Data { data: Vec<u8>, ordered: bool },","highlight_start":27,"highlight_end":34}],"label":null,"suggested_replacement":"ordered: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `ordered`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:23:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Data { data: Vec<u8>, ordered: bool },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `ordered: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `data`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":610,"byte_end":614,"line_start":24,"line_end":24,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"    Snapshot { data: Vec<u8>, timestamp: u32 },","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":610,"byte_end":614,"line_start":24,"line_end":24,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"    Snapshot { data: Vec<u8>, timestamp: u32 },","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"data: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `data`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:24:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Snapshot { data: Vec<u8>, timestamp: u32 },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `data: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `timestamp`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":625,"byte_end":634,"line_start":24,"line_end":24,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"    Snapshot { data: Vec<u8>, timestamp: u32 },","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":625,"byte_end":634,"line_start":24,"line_end":24,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"    Snapshot { data: Vec<u8>, timestamp: u32 },","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":"timestamp: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `timestamp`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:24:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Snapshot { data: Vec<u8>, timestamp: u32 },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `timestamp: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `delta`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":664,"byte_end":669,"line_start":25,"line_end":25,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"    SnapshotDelta { delta: Vec<u8>, timestamp: u32 },","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":664,"byte_end":669,"line_start":25,"line_end":25,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"    SnapshotDelta { delta: Vec<u8>, timestamp: u32 },","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":"delta: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `delta`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:25:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SnapshotDelta { delta: Vec<u8>, timestamp: u32 },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `delta: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `timestamp`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":680,"byte_end":689,"line_start":25,"line_end":25,"column_start":37,"column_end":46,"is_primary":true,"text":[{"text":"    SnapshotDelta { delta: Vec<u8>, timestamp: u32 },","highlight_start":37,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":680,"byte_end":689,"line_start":25,"line_end":25,"column_start":37,"column_end":46,"is_primary":true,"text":[{"text":"    SnapshotDelta { delta: Vec<u8>, timestamp: u32 },","highlight_start":37,"highlight_end":46}],"label":null,"suggested_replacement":"timestamp: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `timestamp`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:25:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SnapshotDelta { delta: Vec<u8>, timestamp: u32 },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `timestamp: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `data`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":714,"byte_end":718,"line_start":26,"line_end":26,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":714,"byte_end":718,"line_start":26,"line_end":26,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"data: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `data`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:26:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `data: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `fragment_id`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":729,"byte_end":740,"line_start":26,"line_end":26,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":729,"byte_end":740,"line_start":26,"line_end":26,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":"fragment_id: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `fragment_id`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:26:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `fragment_id: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `total_fragments`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\packet.rs","byte_start":746,"byte_end":761,"line_start":26,"line_end":26,"column_start":48,"column_end":63,"is_primary":true,"text":[{"text":"    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },","highlight_start":48,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src\\packet.rs","byte_start":746,"byte_end":761,"line_start":26,"line_end":26,"column_start":48,"column_end":63,"is_primary":true,"text":[{"text":"    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },","highlight_start":48,"highlight_end":63}],"label":null,"suggested_replacement":"total_fragments: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `total_fragments`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\packet.rs:26:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Fragment { data: Vec<u8>, fragment_id: u8, total_fragments: u8 },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try ignoring the field: `total_fragments: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 42 previous errors; 15 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 42 previous errors; 15 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0119, E0308, E0599, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0061, E0119, E0308, E0599, E0609.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
